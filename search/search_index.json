{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to selfhosters.net \u00b6 Selfhosters.net is a documentation portal for the Unraid Discord . Here you will find short guides and walkthroughs made by the Unraid community. The README has a short guide on how to get started contributing","title":"Home"},{"location":"#welcome-to-selfhostersnet","text":"Selfhosters.net is a documentation portal for the Unraid Discord . Here you will find short guides and walkthroughs made by the Unraid community. The README has a short guide on how to get started contributing","title":"Welcome to selfhosters.net"},{"location":"commands/","text":"Nice to know Unraid commands \u00b6 Docker service \u00b6 /etc/rc.d/rc.docker <command> Available commands: start stop restart status Docker containers \u00b6 docker <command> <containername> Available commands: start stop restart pause logs Print all container names: docker ps --format \u2018 {{ .Names }} \u2019 Print all container images: docker ps --format \u2018 {{ .Image }} \u2019 Nginx \u00b6 /etc/rc.d/rc.nginx <command> Available commands: start stop restart status PHP \u00b6 /etc/rc.d/rc.php-fpm <command> Available commands: start stop restart status VM Service \u00b6 /etc/rc.d/rc.libvirt <command> Available commands: start stop List all domains: virsh list --all Domains \u00b6 virsh <command> <domain> Available commands: start shutdown reboot suspend Samba \u00b6 /etc/rd.d/rc.samba <command> Available commands: start stop Unraid \u00b6 Shutdown/Reboot \u00b6 /sbin/<command> Available commands: reboot poweroff shutdown Note poweroff If you get an unclean shutdown when issuing this command you need to adjust your timeout settings, see https://forums.unraid.net/topic/69868-dealing-with-unclean-shutdowns Run diagnostics \u00b6 diagnostics Tail the syslog \u00b6 tail -f /var/log/syslog Look at the parameters in the config file \u00b6 nano /boot/syslinux.cfg- Create a backup image of your usb and store it on disk1 \u00b6 dd if = /dev/sda of = /mnt/disk1/unraid.img Copy files using midnight commander \u00b6 mc Check power on hours for all drives \u00b6 for drive in $( ls -la /dev | grep -Ev 'sda|sd[a-z][0-9]' | grep sd [ a-z ] | awk '{print $10}' ) ; do hours = $( smartctl --all /dev/ ${ drive } | grep Power_On_Hours | awk '{print $10}' ) ; echo \"Power on Hours for ${ drive } : ${ hours } \" ; echo '' ; done","title":"Nice to know Unraid commands"},{"location":"commands/#nice-to-know-unraid-commands","text":"","title":"Nice to know Unraid commands"},{"location":"commands/#docker-service","text":"/etc/rc.d/rc.docker <command> Available commands: start stop restart status","title":"Docker service"},{"location":"commands/#docker-containers","text":"docker <command> <containername> Available commands: start stop restart pause logs Print all container names: docker ps --format \u2018 {{ .Names }} \u2019 Print all container images: docker ps --format \u2018 {{ .Image }} \u2019","title":"Docker containers"},{"location":"commands/#nginx","text":"/etc/rc.d/rc.nginx <command> Available commands: start stop restart status","title":"Nginx"},{"location":"commands/#php","text":"/etc/rc.d/rc.php-fpm <command> Available commands: start stop restart status","title":"PHP"},{"location":"commands/#vm-service","text":"/etc/rc.d/rc.libvirt <command> Available commands: start stop List all domains: virsh list --all","title":"VM Service"},{"location":"commands/#domains","text":"virsh <command> <domain> Available commands: start shutdown reboot suspend","title":"Domains"},{"location":"commands/#samba","text":"/etc/rd.d/rc.samba <command> Available commands: start stop","title":"Samba"},{"location":"commands/#unraid","text":"","title":"Unraid"},{"location":"commands/#shutdownreboot","text":"/sbin/<command> Available commands: reboot poweroff shutdown Note poweroff If you get an unclean shutdown when issuing this command you need to adjust your timeout settings, see https://forums.unraid.net/topic/69868-dealing-with-unclean-shutdowns","title":"Shutdown/Reboot"},{"location":"commands/#run-diagnostics","text":"diagnostics","title":"Run diagnostics"},{"location":"commands/#tail-the-syslog","text":"tail -f /var/log/syslog","title":"Tail the syslog"},{"location":"commands/#look-at-the-parameters-in-the-config-file","text":"nano /boot/syslinux.cfg-","title":"Look at the parameters in the config file"},{"location":"commands/#create-a-backup-image-of-your-usb-and-store-it-on-disk1","text":"dd if = /dev/sda of = /mnt/disk1/unraid.img","title":"Create a backup image of your usb and store it on disk1"},{"location":"commands/#copy-files-using-midnight-commander","text":"mc","title":"Copy files using midnight commander"},{"location":"commands/#check-power-on-hours-for-all-drives","text":"for drive in $( ls -la /dev | grep -Ev 'sda|sd[a-z][0-9]' | grep sd [ a-z ] | awk '{print $10}' ) ; do hours = $( smartctl --all /dev/ ${ drive } | grep Power_On_Hours | awk '{print $10}' ) ; echo \"Power on Hours for ${ drive } : ${ hours } \" ; echo '' ; done","title":"Check power on hours for all drives"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/","text":"How to Put unRAID containers on their own VLAN inside a VPN Tunnel using PFSense \u00b6 Credits: Written by Schwiing#3404 Based on the work of IamSpartacus#3678 Disclaimer: This guide makes the following assumptions: You're using PFsense as your Firewall You're using unRAID You have a VPN Provider (In this example I used mullvad) You have a managed switch and know how to tag VLAN traffic on that switch (In this example I used unifi) Create OpenVPN Clients in PFSense \u00b6 Head to VPN -> OpenVPN -> Clients -> + Add Fill out the client information based on your provider. I use mullvad, so I followed this guide: mullvad.net The only differences I made were: a. Set Server Host to: (a server closer to you from this list ) b. Make sure these are checked: Bars the server from adding routed to the client's routing table Don't add or remove routes automatically Mullvad supports up to 5 connections at once. So if you want to go down that route, add 5 clients a. Make sure to add a different server host for each client Add interface assignments for each OpenVPN Client \u00b6 This is just a matter of creating an interface for each new ovpnc* you made earlier Interfaces -> Assignments -> + Add. I named them based on the server each interface would connect to For example, my first interface name is MULLVAD_CHICAGO_002 (same as the server it connects to) Create the rest of your interfaces (remember, up to 5) Create a VLAN \u00b6 Interfaces -> VLANs -> + add Select your LAN as your parent interface (Physical NIC) Pick a VLAN Tag. Make sure you remember this for later. I picked \"90\", so my network is 192.168.90.0/24 Add a description. I used \"DOCKER_VPN\" Create NAT Mappings \u00b6 Firewall -> NAT -> Outbound Make sure Outbound NAT Mode = Manual Add a rule to the top of the list with the following settings: Interface: MULLVAD_CHICAGO_002 Protocol: Any Source: Network, 192.168.90.0/24 (Fill in whatever your VLAN Tag + Network is here) Create Gateway Group \u00b6 System -> Routing -> Gateway Groups -> + Add Set all of your new gateways to Tier 1 Trigger Level: Packet Loss or High Latency Keep WAN_DHCP at \"Never\" Tier Name it. I called it \"Mullvad Gateway Group\" Create VLAN Rule \u00b6 Select your new VLAN (Mine is DOCKER_VPN) Top Rule: Action: Pass Interface: DOCKER_VPN Address Family: IPv4 Source: DOCKER_VPN net Destination: LAN net Bottom Rule: Hit \"Display Advanced\" under Extra Options Action: Pass Interface: DOCKER_VPN Address Family: IPv4 Source: DOCKER_VPN net Destination: any Gateway: Mullvad_VPN_Group Add DNS Servers to VLAN \u00b6 Services -> DHCP Server -> DOCKER_VPN DNS Servers (these are for mullvad. YMMV): 193.138.218.74 10.8.0.1 Misc PFsense Steps \u00b6 System -> Advanced -> Miscellaneous Gateway Monitoring: Do not create rules when gateway is down -> CHECKED unRAID steps \u00b6 Go to Network settings Enable VLANs: Yes VLAN Number: 90 (whatever you set your VLAN Tag earlier in Pfsense) Network Protocol: Ipv4 Only IPv4 Address: 192.168.90.31 (whatever you want here, under the same subnet) IPv4 default gateway: 192.168.90.1 Next, Docker settings. Enable Docker: No, Advanced view: on Host Access to custom networks: Enabled Ipv4 custom network on interface br0.90: Subnet: 192.168.90.0/24 Gateway: 192.168.90.1 DHCP Pool: 192.168.90.240/28 (16 hosts) [Set whatever you want here. 16 was plenty for me] Once done, you now have a new VLAN in Unraid. Assign docker container new network. Set a static IP if it's easier for your Reverse Proxied containers","title":"Route a container trough a VPN with PfSense"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#how-to-put-unraid-containers-on-their-own-vlan-inside-a-vpn-tunnel-using-pfsense","text":"Credits: Written by Schwiing#3404 Based on the work of IamSpartacus#3678 Disclaimer: This guide makes the following assumptions: You're using PFsense as your Firewall You're using unRAID You have a VPN Provider (In this example I used mullvad) You have a managed switch and know how to tag VLAN traffic on that switch (In this example I used unifi)","title":"How to Put unRAID containers on their own VLAN inside a VPN Tunnel using PFSense"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#create-openvpn-clients-in-pfsense","text":"Head to VPN -> OpenVPN -> Clients -> + Add Fill out the client information based on your provider. I use mullvad, so I followed this guide: mullvad.net The only differences I made were: a. Set Server Host to: (a server closer to you from this list ) b. Make sure these are checked: Bars the server from adding routed to the client's routing table Don't add or remove routes automatically Mullvad supports up to 5 connections at once. So if you want to go down that route, add 5 clients a. Make sure to add a different server host for each client","title":"Create OpenVPN Clients in PFSense"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#add-interface-assignments-for-each-openvpn-client","text":"This is just a matter of creating an interface for each new ovpnc* you made earlier Interfaces -> Assignments -> + Add. I named them based on the server each interface would connect to For example, my first interface name is MULLVAD_CHICAGO_002 (same as the server it connects to) Create the rest of your interfaces (remember, up to 5)","title":"Add interface assignments for each OpenVPN Client"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#create-a-vlan","text":"Interfaces -> VLANs -> + add Select your LAN as your parent interface (Physical NIC) Pick a VLAN Tag. Make sure you remember this for later. I picked \"90\", so my network is 192.168.90.0/24 Add a description. I used \"DOCKER_VPN\"","title":"Create a VLAN"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#create-nat-mappings","text":"Firewall -> NAT -> Outbound Make sure Outbound NAT Mode = Manual Add a rule to the top of the list with the following settings: Interface: MULLVAD_CHICAGO_002 Protocol: Any Source: Network, 192.168.90.0/24 (Fill in whatever your VLAN Tag + Network is here)","title":"Create NAT Mappings"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#create-gateway-group","text":"System -> Routing -> Gateway Groups -> + Add Set all of your new gateways to Tier 1 Trigger Level: Packet Loss or High Latency Keep WAN_DHCP at \"Never\" Tier Name it. I called it \"Mullvad Gateway Group\"","title":"Create Gateway Group"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#create-vlan-rule","text":"Select your new VLAN (Mine is DOCKER_VPN) Top Rule: Action: Pass Interface: DOCKER_VPN Address Family: IPv4 Source: DOCKER_VPN net Destination: LAN net Bottom Rule: Hit \"Display Advanced\" under Extra Options Action: Pass Interface: DOCKER_VPN Address Family: IPv4 Source: DOCKER_VPN net Destination: any Gateway: Mullvad_VPN_Group","title":"Create VLAN Rule"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#add-dns-servers-to-vlan","text":"Services -> DHCP Server -> DOCKER_VPN DNS Servers (these are for mullvad. YMMV): 193.138.218.74 10.8.0.1","title":"Add DNS Servers to VLAN"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#misc-pfsense-steps","text":"System -> Advanced -> Miscellaneous Gateway Monitoring: Do not create rules when gateway is down -> CHECKED","title":"Misc PFsense Steps"},{"location":"docker/pfsense_vlan_vpn/pfsense_vlan_vpn/#unraid-steps","text":"Go to Network settings Enable VLANs: Yes VLAN Number: 90 (whatever you set your VLAN Tag earlier in Pfsense) Network Protocol: Ipv4 Only IPv4 Address: 192.168.90.31 (whatever you want here, under the same subnet) IPv4 default gateway: 192.168.90.1 Next, Docker settings. Enable Docker: No, Advanced view: on Host Access to custom networks: Enabled Ipv4 custom network on interface br0.90: Subnet: 192.168.90.0/24 Gateway: 192.168.90.1 DHCP Pool: 192.168.90.240/28 (16 hosts) [Set whatever you want here. 16 was plenty for me] Once done, you now have a new VLAN in Unraid. Assign docker container new network. Set a static IP if it's easier for your Reverse Proxied containers","title":"unRAID steps"},{"location":"docker/plex/cloudflare/","text":"Routing Plex through Cloudflare \u00b6 Why \u00b6 Routing Plex through the Cloudflare CDN can vastly improve your remote connection speeds to your server. Cloudflare acts as a middle man between your server and your different clients. Many experience bad peering between server and client even though the server has a good upload speed. This is because the client sometimes has to hop through all sorts of hoops if it's on a different ISP network. This can increase latency and lowered connection speeds. But by using Cloudflare as a middle man, both your server and the clients will (in most cases) have a great connection to Cloudflare. This will speed up the start times and scrolling of your streams and the general stability of the connection. Update February 1, 2020 Cloudflare has updated their TOS with the following: Cloudflare TOS 2.8 Use of the Service for serving video (unless purchased separately as a Paid Service) or a disproportionate percentage of pictures, audio files, or other non-HTML content, is prohibited. It previously only mentioned cached content. So if you plan on doing this, I would recommend setting up a separate account and domain if you already use Cloudflare. Reverse proxy \u00b6 To get this working you need to reverse proxy Plex. This guide won't go into detail on how to do this. But I highly recommend this guide as a starting point. Let's Encrypt, Nginx & Reverse Proxy Starter Guide - 2019 Edition The linuxserver/letsencrypt container comes with premade nginx configs that you can use. If you're stuck, just pop into the #reverse-proxy channel on our Discord and someone will help you Nginx subdomain example plex.conf server { listen 443 ssl ; listen [::]:443 ssl ; server_name plex.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; proxy_redirect off ; proxy_buffering off ; location / { include /config/nginx/proxy.conf ; proxy_pass http://HOSTIP:32400/ ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection \"upgrade\" ; proxy_set_header X-Plex-Client-Identifier $http_x_plex_client_identifier ; proxy_set_header X-Plex-Device $http_x_plex_device ; proxy_set_header X-Plex-Device-Name $http_x_plex_device_name ; proxy_set_header X-Plex-Platform $http_x_plex_platform ; proxy_set_header X-Plex-Platform-Version $http_x_plex_platform_version ; proxy_set_header X-Plex-Product $http_x_plex_product ; proxy_set_header X-Plex-Token $http_x_plex_token ; proxy_set_header X-Plex-Version $http_x_plex_version ; proxy_set_header X-Plex-Nocache $http_x_plex_nocache ; proxy_set_header X-Plex-Provides $http_x_plex_provides ; proxy_set_header X-Plex-Device-Vendor $http_x_plex_device_vendor ; proxy_set_header X-Plex-Model $http_x_plex_model ; } } ssl.conf ## Version 2020/01/07 - Changelog: https://github.com/linuxserver/docker-letsencrypt/commits/master/root/defaults/ssl.conf # session settings ssl_session_timeout 1d ; ssl_session_cache shared:SSL:50m ; ssl_session_tickets off ; # Diffie-Hellman parameter for DHE cipher suites ssl_dhparam /config/nginx/dhparams.pem ; # ssl certs ssl_certificate /config/keys/letsencrypt/fullchain.pem ; ssl_certificate_key /config/keys/letsencrypt/privkey.pem ; # protocols # using generated 2020-01-07, https://ssl-config.mozilla.org/#server=nginx&server-version=1.16.1-r4&config=intermediate&openssl-version=1.1.1d-r3 ssl_protocols TLSv1.2 TLSv1.3 ; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 ; ssl_prefer_server_ciphers off ; # HSTS, remove # from the line below to enable HSTS #add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\" always; # OCSP Stapling ssl_stapling on ; ssl_stapling_verify on ; resolver 127 .0.0.11 valid=30s ; # Docker DNS Server # Enable TLS 1.3 early data ssl_early_data on ; # Optional additional headers #add_header Content-Security-Policy \"upgrade-insecure-requests\"; #add_header X-Frame-Options \"SAMEORIGIN\" always; #add_header X-XSS-Protection \"1; mode=block\" always; #add_header X-Content-Type-Options \"nosniff\" always; #add_header X-UA-Compatible \"IE=Edge\" always; #add_header Cache-Control \"no-transform\" always; #add_header Referrer-Policy \"same-origin\" always; proxy.conf ## Version 2019/10/23 - Changelog: https://github.com/linuxserver/docker-letsencrypt/commits/master/root/defaults/proxy.conf client_body_buffer_size 128k ; #Timeout if the real server is dead proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 ; # Advanced Proxy Config send_timeout 5m ; proxy_read_timeout 240 ; proxy_send_timeout 240 ; proxy_connect_timeout 240 ; # TLS 1.3 early data proxy_set_header Early-Data $ssl_early_data ; # Basic Proxy Config proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto https ; proxy_set_header X-Forwarded-Host $host ; proxy_set_header X-Forwarded-Ssl on ; proxy_redirect http:// $scheme:// ; proxy_http_version 1 .1 ; proxy_set_header Connection \"\" ; #proxy_cookie_path / \"/; HTTPOnly; Secure\"; # enable at your own risk, may break certain apps proxy_cache_bypass $cookie_session ; proxy_no_cache $cookie_session ; proxy_buffers 32 4k ; proxy_headers_hash_bucket_size 128 ; proxy_headers_hash_max_size 1024 ; Cloudflare \u00b6 If you haven't already you need to add your domain to Cloudflare for this to work. See this guide on how to do that: Creating a Cloudflare account and adding a website In short you need to change your nameservers on your DNS provides page to the ones Cloudflare says. This might take some time depending on the DNS provider. Last time I did it I was using Namecheap and it took less then 10 minutes to propagate, so have some patience. After it's been transfered make sure the orange cloud is enabled. This is what activates the Cloudflare CDN on the domain. Cache rules \u00b6 This is very important that you do or else Cloudflare might ban your account for breaking the TOS on caching. Info See: 2.8 Limitation on Serving Non-HTML Content Go to the Page Rules menu and click on Create page rule You can have 3 page rules per domain. Add your domain with a wildcard at the end like so: plex.domain.com/* If you're using your root domain you do the same. domain.com/* or domain.com/plex* If you want to add the rule on all subdomains you can do that so: *.domain.com/ Next select the Cache Level setting and set it to Bypass Then click Save and Deploy Disable IPv6 \u00b6 There is currently a bug in Plex that it sees remote IPv6 adresses as local when reverse proxied. And as Cloudflare uses IPv6 we can disable that using the Cloudflare API. (It's not possible through the webUI) This bug won't affect performance, but any remote streams using IPv6 will show as local on the Plex dashboard and in Tautili. So this is more of an annoyance that we can easily fix. Below is the command you need to run for disabling IPv6. curl -X PATCH \"https://api.cloudflare.com/client/v4/zones/xxxxxxxxxxxxxxxxx/settings/ipv6\" \\ -H \"X-Auth-Email: xxxxxxx@email.com\" \\ -H \"X-Auth-Key: xxxxxxxxxxxxxxxxxxxxx\" \\ -H \"Content-Type: application/json\" \\ --data '{\"value\":\"off\"}' In the API URL replace the x's with you Zone ID for you domain. You can find the zone ID on the Overview page at the bottom. On the second line add your email account you used for Cloudflare and on the third line add your Global API key The Global API key can be found on your profile page and then API Tokens. Next just paste all the lines into the terminal and hit enter. If successful, the output will look like this: { \"result\" :{ \"id\" : \"ipv6\" , \"value\" : \"off\" , \"modified_on\" : \"2020-01-21T20:52:11.121560Z\" , \"editable\" : true }, \"success\" : true , \"errors\" :[], \"messages\" :[]} In the webui it should now say that IPv6 Compatibility is off. Plex \u00b6 Custom server access URLs \u00b6 After you've setup your reverse proxy for Plex and configured Cloudflare, go into your Plex settings and select Network . Then click on Show Advanced and scroll down to Custom server access URLs Add your domain you setup for plex with the port 443 after like so: https://plexdomain.com:443 or https://plexdomain.com:443/plex and hit save. At this point you do not need to have Remote Access enabled anymore. To test you can disable your Remote Access and try and stream something remotely. After a little while you should see on the Cloudflare Overview page that the Total Data Served have increased. Happy streaming","title":"Routing Plex through Cloudflare"},{"location":"docker/plex/cloudflare/#routing-plex-through-cloudflare","text":"","title":"Routing Plex through Cloudflare"},{"location":"docker/plex/cloudflare/#why","text":"Routing Plex through the Cloudflare CDN can vastly improve your remote connection speeds to your server. Cloudflare acts as a middle man between your server and your different clients. Many experience bad peering between server and client even though the server has a good upload speed. This is because the client sometimes has to hop through all sorts of hoops if it's on a different ISP network. This can increase latency and lowered connection speeds. But by using Cloudflare as a middle man, both your server and the clients will (in most cases) have a great connection to Cloudflare. This will speed up the start times and scrolling of your streams and the general stability of the connection. Update February 1, 2020 Cloudflare has updated their TOS with the following: Cloudflare TOS 2.8 Use of the Service for serving video (unless purchased separately as a Paid Service) or a disproportionate percentage of pictures, audio files, or other non-HTML content, is prohibited. It previously only mentioned cached content. So if you plan on doing this, I would recommend setting up a separate account and domain if you already use Cloudflare.","title":"Why"},{"location":"docker/plex/cloudflare/#reverse-proxy","text":"To get this working you need to reverse proxy Plex. This guide won't go into detail on how to do this. But I highly recommend this guide as a starting point. Let's Encrypt, Nginx & Reverse Proxy Starter Guide - 2019 Edition The linuxserver/letsencrypt container comes with premade nginx configs that you can use. If you're stuck, just pop into the #reverse-proxy channel on our Discord and someone will help you Nginx subdomain example plex.conf server { listen 443 ssl ; listen [::]:443 ssl ; server_name plex.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; proxy_redirect off ; proxy_buffering off ; location / { include /config/nginx/proxy.conf ; proxy_pass http://HOSTIP:32400/ ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection \"upgrade\" ; proxy_set_header X-Plex-Client-Identifier $http_x_plex_client_identifier ; proxy_set_header X-Plex-Device $http_x_plex_device ; proxy_set_header X-Plex-Device-Name $http_x_plex_device_name ; proxy_set_header X-Plex-Platform $http_x_plex_platform ; proxy_set_header X-Plex-Platform-Version $http_x_plex_platform_version ; proxy_set_header X-Plex-Product $http_x_plex_product ; proxy_set_header X-Plex-Token $http_x_plex_token ; proxy_set_header X-Plex-Version $http_x_plex_version ; proxy_set_header X-Plex-Nocache $http_x_plex_nocache ; proxy_set_header X-Plex-Provides $http_x_plex_provides ; proxy_set_header X-Plex-Device-Vendor $http_x_plex_device_vendor ; proxy_set_header X-Plex-Model $http_x_plex_model ; } } ssl.conf ## Version 2020/01/07 - Changelog: https://github.com/linuxserver/docker-letsencrypt/commits/master/root/defaults/ssl.conf # session settings ssl_session_timeout 1d ; ssl_session_cache shared:SSL:50m ; ssl_session_tickets off ; # Diffie-Hellman parameter for DHE cipher suites ssl_dhparam /config/nginx/dhparams.pem ; # ssl certs ssl_certificate /config/keys/letsencrypt/fullchain.pem ; ssl_certificate_key /config/keys/letsencrypt/privkey.pem ; # protocols # using generated 2020-01-07, https://ssl-config.mozilla.org/#server=nginx&server-version=1.16.1-r4&config=intermediate&openssl-version=1.1.1d-r3 ssl_protocols TLSv1.2 TLSv1.3 ; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 ; ssl_prefer_server_ciphers off ; # HSTS, remove # from the line below to enable HSTS #add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\" always; # OCSP Stapling ssl_stapling on ; ssl_stapling_verify on ; resolver 127 .0.0.11 valid=30s ; # Docker DNS Server # Enable TLS 1.3 early data ssl_early_data on ; # Optional additional headers #add_header Content-Security-Policy \"upgrade-insecure-requests\"; #add_header X-Frame-Options \"SAMEORIGIN\" always; #add_header X-XSS-Protection \"1; mode=block\" always; #add_header X-Content-Type-Options \"nosniff\" always; #add_header X-UA-Compatible \"IE=Edge\" always; #add_header Cache-Control \"no-transform\" always; #add_header Referrer-Policy \"same-origin\" always; proxy.conf ## Version 2019/10/23 - Changelog: https://github.com/linuxserver/docker-letsencrypt/commits/master/root/defaults/proxy.conf client_body_buffer_size 128k ; #Timeout if the real server is dead proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 ; # Advanced Proxy Config send_timeout 5m ; proxy_read_timeout 240 ; proxy_send_timeout 240 ; proxy_connect_timeout 240 ; # TLS 1.3 early data proxy_set_header Early-Data $ssl_early_data ; # Basic Proxy Config proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto https ; proxy_set_header X-Forwarded-Host $host ; proxy_set_header X-Forwarded-Ssl on ; proxy_redirect http:// $scheme:// ; proxy_http_version 1 .1 ; proxy_set_header Connection \"\" ; #proxy_cookie_path / \"/; HTTPOnly; Secure\"; # enable at your own risk, may break certain apps proxy_cache_bypass $cookie_session ; proxy_no_cache $cookie_session ; proxy_buffers 32 4k ; proxy_headers_hash_bucket_size 128 ; proxy_headers_hash_max_size 1024 ;","title":"Reverse proxy"},{"location":"docker/plex/cloudflare/#cloudflare","text":"If you haven't already you need to add your domain to Cloudflare for this to work. See this guide on how to do that: Creating a Cloudflare account and adding a website In short you need to change your nameservers on your DNS provides page to the ones Cloudflare says. This might take some time depending on the DNS provider. Last time I did it I was using Namecheap and it took less then 10 minutes to propagate, so have some patience. After it's been transfered make sure the orange cloud is enabled. This is what activates the Cloudflare CDN on the domain.","title":"Cloudflare"},{"location":"docker/plex/cloudflare/#cache-rules","text":"This is very important that you do or else Cloudflare might ban your account for breaking the TOS on caching. Info See: 2.8 Limitation on Serving Non-HTML Content Go to the Page Rules menu and click on Create page rule You can have 3 page rules per domain. Add your domain with a wildcard at the end like so: plex.domain.com/* If you're using your root domain you do the same. domain.com/* or domain.com/plex* If you want to add the rule on all subdomains you can do that so: *.domain.com/ Next select the Cache Level setting and set it to Bypass Then click Save and Deploy","title":"Cache rules"},{"location":"docker/plex/cloudflare/#disable-ipv6","text":"There is currently a bug in Plex that it sees remote IPv6 adresses as local when reverse proxied. And as Cloudflare uses IPv6 we can disable that using the Cloudflare API. (It's not possible through the webUI) This bug won't affect performance, but any remote streams using IPv6 will show as local on the Plex dashboard and in Tautili. So this is more of an annoyance that we can easily fix. Below is the command you need to run for disabling IPv6. curl -X PATCH \"https://api.cloudflare.com/client/v4/zones/xxxxxxxxxxxxxxxxx/settings/ipv6\" \\ -H \"X-Auth-Email: xxxxxxx@email.com\" \\ -H \"X-Auth-Key: xxxxxxxxxxxxxxxxxxxxx\" \\ -H \"Content-Type: application/json\" \\ --data '{\"value\":\"off\"}' In the API URL replace the x's with you Zone ID for you domain. You can find the zone ID on the Overview page at the bottom. On the second line add your email account you used for Cloudflare and on the third line add your Global API key The Global API key can be found on your profile page and then API Tokens. Next just paste all the lines into the terminal and hit enter. If successful, the output will look like this: { \"result\" :{ \"id\" : \"ipv6\" , \"value\" : \"off\" , \"modified_on\" : \"2020-01-21T20:52:11.121560Z\" , \"editable\" : true }, \"success\" : true , \"errors\" :[], \"messages\" :[]} In the webui it should now say that IPv6 Compatibility is off.","title":"Disable IPv6"},{"location":"docker/plex/cloudflare/#plex","text":"","title":"Plex"},{"location":"docker/plex/cloudflare/#custom-server-access-urls","text":"After you've setup your reverse proxy for Plex and configured Cloudflare, go into your Plex settings and select Network . Then click on Show Advanced and scroll down to Custom server access URLs Add your domain you setup for plex with the port 443 after like so: https://plexdomain.com:443 or https://plexdomain.com:443/plex and hit save. At this point you do not need to have Remote Access enabled anymore. To test you can disable your Remote Access and try and stream something remotely. After a little while you should see on the Cloudflare Overview page that the Total Data Served have increased. Happy streaming","title":"Custom server access URLs"},{"location":"docker/telegraf/ipmi/","text":"Adding IPMI stats to the Telegraf container \u00b6 Telegraf \u00b6 If we try and activate the ipmi_sensor plugin in the telegraf.conf file we will get an error in the log saying the following: Error 2020-01-21T17:28:50Z E! [inputs.ipmi_sensor] Error in plugin: ipmitool not found: verify that ipmitool is installed and that ipmitool is in your PATH This happens because the telegraf container does not come with ipmitool installed. This can be easly fixed by just adding the following command in the post argument when creating the container: /bin/sh -c 'apk update && apk add ipmitool && telegraf' If you are using telegraf , rather than the default telefraf:alpine use the ubuntu variant of this command /bin/sh -c 'apt update && apt install -y ipmitool && telegraf' Edit the container and add the line in the Post Arguments: input field. Next just click save and the container will be recreated with impitool installed. Grafana \u00b6 Below is two simple graph panels I made with Grafana. Create two graph panels in Grafana and copy the JSON below. IPMI Voltages panel JSON { \"datasource\" : null , \"aliasColors\" : {}, \"bars\" : false , \"cacheTimeout\" : null , \"dashLength\" : 10 , \"dashes\" : false , \"fill\" : 1 , \"fillGradient\" : 0 , \"gridPos\" : { \"h\" : 8 , \"w\" : 16 , \"x\" : 0 , \"y\" : 0 }, \"hiddenSeries\" : false , \"id\" : 6 , \"legend\" : { \"alignAsTable\" : true , \"avg\" : false , \"current\" : true , \"max\" : false , \"min\" : false , \"rightSide\" : true , \"show\" : true , \"sort\" : \"current\" , \"sortDesc\" : true , \"total\" : false , \"values\" : true }, \"lines\" : true , \"linewidth\" : 1 , \"links\" : [], \"nullPointMode\" : \"connected\" , \"options\" : { \"dataLinks\" : [] }, \"percentage\" : false , \"pluginVersion\" : \"6.6.0-pre\" , \"pointradius\" : 2 , \"points\" : false , \"renderer\" : \"flot\" , \"seriesOverrides\" : [], \"spaceLength\" : 10 , \"stack\" : false , \"steppedLine\" : false , \"targets\" : [ { \"alias\" : \"$tag_name\" , \"groupBy\" : [ { \"params\" : [ \"$__interval\" ], \"type\" : \"time\" }, { \"params\" : [ \"name\" ], \"type\" : \"tag\" }, { \"params\" : [ \"host\" ], \"type\" : \"tag\" }, { \"params\" : [ \"unit\" ], \"type\" : \"tag\" }, { \"params\" : [ \"none\" ], \"type\" : \"fill\" } ], \"measurement\" : \"ipmi_sensor\" , \"orderByTime\" : \"ASC\" , \"policy\" : \"default\" , \"refId\" : \"A\" , \"resultFormat\" : \"time_series\" , \"select\" : [ [ { \"params\" : [ \"value\" ], \"type\" : \"field\" }, { \"params\" : [], \"type\" : \"mean\" } ] ], \"tags\" : [ { \"key\" : \"unit\" , \"operator\" : \"=\" , \"value\" : \"volts\" } ] } ], \"thresholds\" : [], \"timeFrom\" : null , \"timeRegions\" : [], \"timeShift\" : null , \"title\" : \"IPMI Voltages\" , \"tooltip\" : { \"shared\" : true , \"sort\" : 0 , \"value_type\" : \"individual\" }, \"type\" : \"graph\" , \"xaxis\" : { \"buckets\" : null , \"mode\" : \"time\" , \"name\" : null , \"show\" : true , \"values\" : [] }, \"yaxes\" : [ { \"format\" : \"volt\" , \"label\" : null , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true }, { \"format\" : \"short\" , \"label\" : null , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true } ], \"yaxis\" : { \"align\" : false , \"alignLevel\" : null } } IPMI Temperature panel JSON { \"datasource\" : null , \"aliasColors\" : {}, \"bars\" : false , \"cacheTimeout\" : null , \"dashLength\" : 10 , \"dashes\" : false , \"fill\" : 1 , \"fillGradient\" : 0 , \"gridPos\" : { \"h\" : 8 , \"w\" : 16 , \"x\" : 0 , \"y\" : 8 }, \"hiddenSeries\" : false , \"id\" : 8 , \"legend\" : { \"alignAsTable\" : true , \"avg\" : false , \"current\" : true , \"max\" : false , \"min\" : false , \"rightSide\" : true , \"show\" : true , \"sort\" : \"current\" , \"sortDesc\" : true , \"total\" : false , \"values\" : true }, \"lines\" : true , \"linewidth\" : 1 , \"links\" : [], \"nullPointMode\" : \"connected\" , \"options\" : { \"dataLinks\" : [] }, \"percentage\" : false , \"pluginVersion\" : \"6.6.0-pre\" , \"pointradius\" : 2 , \"points\" : false , \"renderer\" : \"flot\" , \"seriesOverrides\" : [], \"spaceLength\" : 10 , \"stack\" : false , \"steppedLine\" : false , \"targets\" : [ { \"alias\" : \"$tag_name\" , \"groupBy\" : [ { \"params\" : [ \"$__interval\" ], \"type\" : \"time\" }, { \"params\" : [ \"name\" ], \"type\" : \"tag\" }, { \"params\" : [ \"host\" ], \"type\" : \"tag\" }, { \"params\" : [ \"unit\" ], \"type\" : \"tag\" }, { \"params\" : [ \"none\" ], \"type\" : \"fill\" } ], \"measurement\" : \"ipmi_sensor\" , \"orderByTime\" : \"ASC\" , \"policy\" : \"default\" , \"refId\" : \"A\" , \"resultFormat\" : \"time_series\" , \"select\" : [ [ { \"params\" : [ \"value\" ], \"type\" : \"field\" }, { \"params\" : [], \"type\" : \"mean\" } ] ], \"tags\" : [ { \"key\" : \"unit\" , \"operator\" : \"=\" , \"value\" : \"degrees_c\" } ] } ], \"thresholds\" : [], \"timeFrom\" : null , \"timeRegions\" : [], \"timeShift\" : null , \"title\" : \"IPMI Temperatures\" , \"tooltip\" : { \"shared\" : true , \"sort\" : 0 , \"value_type\" : \"individual\" }, \"type\" : \"graph\" , \"xaxis\" : { \"buckets\" : null , \"mode\" : \"time\" , \"name\" : null , \"show\" : true , \"values\" : [] }, \"yaxes\" : [ { \"format\" : \"celsius\" , \"label\" : \"\" , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true }, { \"format\" : \"short\" , \"label\" : null , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true } ], \"yaxis\" : { \"align\" : false , \"alignLevel\" : null } }","title":"Adding IPMI stats to the Telegraf container"},{"location":"docker/telegraf/ipmi/#adding-ipmi-stats-to-the-telegraf-container","text":"","title":"Adding IPMI stats to the Telegraf container"},{"location":"docker/telegraf/ipmi/#telegraf","text":"If we try and activate the ipmi_sensor plugin in the telegraf.conf file we will get an error in the log saying the following: Error 2020-01-21T17:28:50Z E! [inputs.ipmi_sensor] Error in plugin: ipmitool not found: verify that ipmitool is installed and that ipmitool is in your PATH This happens because the telegraf container does not come with ipmitool installed. This can be easly fixed by just adding the following command in the post argument when creating the container: /bin/sh -c 'apk update && apk add ipmitool && telegraf' If you are using telegraf , rather than the default telefraf:alpine use the ubuntu variant of this command /bin/sh -c 'apt update && apt install -y ipmitool && telegraf' Edit the container and add the line in the Post Arguments: input field. Next just click save and the container will be recreated with impitool installed.","title":"Telegraf"},{"location":"docker/telegraf/ipmi/#grafana","text":"Below is two simple graph panels I made with Grafana. Create two graph panels in Grafana and copy the JSON below. IPMI Voltages panel JSON { \"datasource\" : null , \"aliasColors\" : {}, \"bars\" : false , \"cacheTimeout\" : null , \"dashLength\" : 10 , \"dashes\" : false , \"fill\" : 1 , \"fillGradient\" : 0 , \"gridPos\" : { \"h\" : 8 , \"w\" : 16 , \"x\" : 0 , \"y\" : 0 }, \"hiddenSeries\" : false , \"id\" : 6 , \"legend\" : { \"alignAsTable\" : true , \"avg\" : false , \"current\" : true , \"max\" : false , \"min\" : false , \"rightSide\" : true , \"show\" : true , \"sort\" : \"current\" , \"sortDesc\" : true , \"total\" : false , \"values\" : true }, \"lines\" : true , \"linewidth\" : 1 , \"links\" : [], \"nullPointMode\" : \"connected\" , \"options\" : { \"dataLinks\" : [] }, \"percentage\" : false , \"pluginVersion\" : \"6.6.0-pre\" , \"pointradius\" : 2 , \"points\" : false , \"renderer\" : \"flot\" , \"seriesOverrides\" : [], \"spaceLength\" : 10 , \"stack\" : false , \"steppedLine\" : false , \"targets\" : [ { \"alias\" : \"$tag_name\" , \"groupBy\" : [ { \"params\" : [ \"$__interval\" ], \"type\" : \"time\" }, { \"params\" : [ \"name\" ], \"type\" : \"tag\" }, { \"params\" : [ \"host\" ], \"type\" : \"tag\" }, { \"params\" : [ \"unit\" ], \"type\" : \"tag\" }, { \"params\" : [ \"none\" ], \"type\" : \"fill\" } ], \"measurement\" : \"ipmi_sensor\" , \"orderByTime\" : \"ASC\" , \"policy\" : \"default\" , \"refId\" : \"A\" , \"resultFormat\" : \"time_series\" , \"select\" : [ [ { \"params\" : [ \"value\" ], \"type\" : \"field\" }, { \"params\" : [], \"type\" : \"mean\" } ] ], \"tags\" : [ { \"key\" : \"unit\" , \"operator\" : \"=\" , \"value\" : \"volts\" } ] } ], \"thresholds\" : [], \"timeFrom\" : null , \"timeRegions\" : [], \"timeShift\" : null , \"title\" : \"IPMI Voltages\" , \"tooltip\" : { \"shared\" : true , \"sort\" : 0 , \"value_type\" : \"individual\" }, \"type\" : \"graph\" , \"xaxis\" : { \"buckets\" : null , \"mode\" : \"time\" , \"name\" : null , \"show\" : true , \"values\" : [] }, \"yaxes\" : [ { \"format\" : \"volt\" , \"label\" : null , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true }, { \"format\" : \"short\" , \"label\" : null , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true } ], \"yaxis\" : { \"align\" : false , \"alignLevel\" : null } } IPMI Temperature panel JSON { \"datasource\" : null , \"aliasColors\" : {}, \"bars\" : false , \"cacheTimeout\" : null , \"dashLength\" : 10 , \"dashes\" : false , \"fill\" : 1 , \"fillGradient\" : 0 , \"gridPos\" : { \"h\" : 8 , \"w\" : 16 , \"x\" : 0 , \"y\" : 8 }, \"hiddenSeries\" : false , \"id\" : 8 , \"legend\" : { \"alignAsTable\" : true , \"avg\" : false , \"current\" : true , \"max\" : false , \"min\" : false , \"rightSide\" : true , \"show\" : true , \"sort\" : \"current\" , \"sortDesc\" : true , \"total\" : false , \"values\" : true }, \"lines\" : true , \"linewidth\" : 1 , \"links\" : [], \"nullPointMode\" : \"connected\" , \"options\" : { \"dataLinks\" : [] }, \"percentage\" : false , \"pluginVersion\" : \"6.6.0-pre\" , \"pointradius\" : 2 , \"points\" : false , \"renderer\" : \"flot\" , \"seriesOverrides\" : [], \"spaceLength\" : 10 , \"stack\" : false , \"steppedLine\" : false , \"targets\" : [ { \"alias\" : \"$tag_name\" , \"groupBy\" : [ { \"params\" : [ \"$__interval\" ], \"type\" : \"time\" }, { \"params\" : [ \"name\" ], \"type\" : \"tag\" }, { \"params\" : [ \"host\" ], \"type\" : \"tag\" }, { \"params\" : [ \"unit\" ], \"type\" : \"tag\" }, { \"params\" : [ \"none\" ], \"type\" : \"fill\" } ], \"measurement\" : \"ipmi_sensor\" , \"orderByTime\" : \"ASC\" , \"policy\" : \"default\" , \"refId\" : \"A\" , \"resultFormat\" : \"time_series\" , \"select\" : [ [ { \"params\" : [ \"value\" ], \"type\" : \"field\" }, { \"params\" : [], \"type\" : \"mean\" } ] ], \"tags\" : [ { \"key\" : \"unit\" , \"operator\" : \"=\" , \"value\" : \"degrees_c\" } ] } ], \"thresholds\" : [], \"timeFrom\" : null , \"timeRegions\" : [], \"timeShift\" : null , \"title\" : \"IPMI Temperatures\" , \"tooltip\" : { \"shared\" : true , \"sort\" : 0 , \"value_type\" : \"individual\" }, \"type\" : \"graph\" , \"xaxis\" : { \"buckets\" : null , \"mode\" : \"time\" , \"name\" : null , \"show\" : true , \"values\" : [] }, \"yaxes\" : [ { \"format\" : \"celsius\" , \"label\" : \"\" , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true }, { \"format\" : \"short\" , \"label\" : null , \"logBase\" : 1 , \"max\" : null , \"min\" : null , \"show\" : true } ], \"yaxis\" : { \"align\" : false , \"alignLevel\" : null } }","title":"Grafana"},{"location":"docker/templating/templating/","text":"Writing a template compatible for unraid \u00b6 This is an effort to collect information from Squids FAQ . 0. Enabling Template Authoring Mode \u00b6 In order to have a smooth experience creating templates I highly recommend enabling Template Authoring Mode , it allows you to see the XML in clear-text and some other small neat tricks we might need to come back to. This process requires you to shut down the docker service for a short while, as unraid doesn't let us change the setting with the service running. When the docker service is successfully shut down, enable advanced view. We can now enable authoring mode, you can also toggle the docker service back on. 1. Choosing which way to go \u00b6 We can create a template in two ways: Convert a template generated by Community Application, the CA way Work directly with the XML The CA way \u00b6 1.1.0 Enabling search from dockerHub \u00b6 In order to have Community Applications (hereby referenced as CA) generate a template, we need to enable additional search from dockerHub. You do this by opening CA, and press the settings button on the sidebar. Enable additional search. 1.1.1 Search from DockerHub \u00b6 For this guide I will use domistyle/idrac6 as an example. Go back to CA, and type the image you want to create a template for in the search bar (If you get a match now, chances are, it is already in CA) and press Get More Results From DockerHub . CA shows results for both the image-maintainer, and image-name. Which means that we will get similar results. Press the download to disk icon, and let CA convert it. For this one CA didn't do a very good job in converting it (It reads the Dockerfile for volumes, expose, publish etc.), however we can modify it with the template editor in Unraid. 1.1.2 Editing the template \u00b6 To see what we need to edit, we can most often refer to the readme of the container (Including a screenshot in case the readme changes) . Get to know the template editor, its very handy. Also for managing existing templates. I'm going through the rest of this guide with a mix of views (to remove clutter from images). If some of the settings you see in a screenshot isn't showing to you, enable advanced view. Variables \u00b6 I will start with adding the variables, just because those are on the top of the documentation of this container. To add the IDRAC_HOST variable, we are going to press the Add another Path, Port, Variable or Device link. We need to change the Config Type to Variable, then we can start adding values. There is a lot going on here, but it is all going to make sense in the end. Name The name for the variable, this is to help the user identifying what this variable does. Key This is the actual variable, so we are putting IDRAC_HOST here. Value We don't fill this, this is for the user. Default Value We could fill this, but since we can only do an estimated guess on what a users idrac host is, we are going to skip it. Description Usually I don't fill this field with this long of a text, but the documentation of the container had a good one, so I'm using it. Display This decides if the \"average user\" (someone that isn't using advanced view) is going to see this variable. Required I set this to yes because I know the container wont work without it set. The fact that the documentation tells me its required also helped in the decision. Password Mask This isn't a password, so it doesn't need to have its value masked behind asterisk (*). Here are some screenshots on how I added the other required variables Here I set the Default value as root, since I know that's the default username on idrac Here I set the Default value as calvin, since I know that's the default password on idrac, I also enabled Password Mask Volumes \u00b6 Next is adding the volumes. We press the same Add another Path, Port, Variable or Device link, but we don't need to change the config type this time. The fields we can add here is mostly the same, but with the \"Volume\" type some of them are voided. Like password mask. If it's a \"proper\" appdata location, I set required to yes Access Mode Defines how the container should have access to this volume. Almost always read/write Ports \u00b6 Now its time for the ports. We press the same Add another Path, Port, Variable or Device link. This time we need to change the config type to Port . The documentation for this container says we can use port 5800 to access the interface, so that's the port we are going to add. It also mentions the VNC port, but most users wont need this. Connection Type Always TCP , unless specified otherwise. Metadata \u00b6 Now you have a basic template. This might be enough for your own usage, but in order to add it to CA we should add some spice to the template. As you can see there are lots of fields we can fill in with the template editor. I'm not going to walk you through this, but I am going to tell you how it ended up like it did. I changed the overview to match the intro from the readme of the container. I used the dropdown to set the categories as I saw fit. I set the support thread as the issue page of the project. Do not do this if you are creating a template for your own container, create a support thread on the unraid forums and use that link The project page is usually the GitHub link to the container. I have yet to change the Icon URL, because I need to create an icon. WebUI Should be filled with the container port, unraid should do the translation http://[IP]:[PORT:5800] . If this is an https enabled port, set the url to use https. For Post arguments and Extra Parameters, you should know if you need to fill this. There is more information on this in the Manual way part 1.1.3 Grab the XML \u00b6 Once you have filled all the fields, and set the ports, variables and volumes as good as you can, you can press the Save button, this takes you to a page where can see the xml in plain-text. Don't worry, it also saves the xml to your OS disk. Bellow is the XML generated by the procedure above. Extracted XML <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <MyIP/> <Shell> sh </Shell> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <TemplateURL/> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <ExtraParams/> <PostArgs/> <CPUset/> <DateInstalled> 1579532295 </DateInstalled> <DonateText/> <DonateLink/> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Networking> <Mode> bridge </Mode> <Publish> <Port> <HostPort/> <ContainerPort> 5800 </ContainerPort> <Protocol> tcp </Protocol> </Port> </Publish> </Networking> <Data> <Volume> <HostDir/> <ContainerDir> /vmedia </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /app </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /screenshots </ContainerDir> <Mode> rw </Mode> </Volume> </Data> <Environment> <Variable> <Value/> <Name> IDRAC_HOST </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_USER </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PASSWORD </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PORT </Name> <Mode/> </Variable> <Variable> <Value> false </Value> <Name> IDRAC_KEYCODE_HACK </Name> <Mode/> </Variable> <Variable> <Value> 99 </Value> <Name> USER_ID </Name> <Mode/> </Variable> <Variable> <Value> 100 </Value> <Name> GROUP_ID </Name> <Mode/> </Variable> </Environment> <Labels/> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container> 1.1.4 Shave off the XML \u00b6 CA adds a lot of stuff that is not necessary for a template, but which Unraid uses to actually run and present the container. My first steps in removing unnecessary tags is to delete tags that are closed without value, like <MyIP/> . XML after <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <Shell> sh </Shell> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <DateInstalled> 1579532295 </DateInstalled> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Networking> <Mode> bridge </Mode> <Publish> <Port> <HostPort/> <ContainerPort> 5800 </ContainerPort> <Protocol> tcp </Protocol> </Port> </Publish> </Networking> <Data> <Volume> <HostDir/> <ContainerDir> /vmedia </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /app </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /screenshots </ContainerDir> <Mode> rw </Mode> </Volume> </Data> <Environment> <Variable> <Value/> <Name> IDRAC_HOST </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_USER </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PASSWORD </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PORT </Name> <Mode/> </Variable> <Variable> <Value> false </Value> <Name> IDRAC_KEYCODE_HACK </Name> <Mode/> </Variable> <Variable> <Value> 99 </Value> <Name> USER_ID </Name> <Mode/> </Variable> <Variable> <Value> 100 </Value> <Name> GROUP_ID </Name> <Mode/> </Variable> </Environment> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container> Since I prefer using just the Config tags, I also remove the tags Networking , Data and Environment together with it's content. XML after <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <Shell> sh </Shell> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <DateInstalled> 1579532295 </DateInstalled> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container> Remove DateInstalled , since it's just used internally for Unraid. Unless you know what shell the container uses, also remove Shell . What I consider a good XML, to base a PR on <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container> More spice It's worth reading 1.1.2 Add a Config and Tips and tricks to see if any of that applies to your template. The Manual way \u00b6 1.2.0 Starting from \"scratch\" \u00b6 To make sure we don't miss anything, we are going to start from a baseXML. I'm using the same example-container as above. Knowing the basics of XML is preferred baseXML <?xml version=\"1.0\"?> <Container version= \"2\" > <Name></Name> <Repository></Repository> <Registry></Registry> <Network> bridge </Network> <Privileged> false </Privileged> <Support></Support> <Project></Project> <Overview></Overview> <WebUI></WebUI> <TemplateURL/> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <ExtraParams/> <PostArgs/> <DonateText/> <DonateLink/> </Container> 1.2.1 Fill the base \u00b6 Since you are here browsing the \"hard\" way, I'm assuming you know some, if not most of the Docker terminology used going forward. Filling the baseXML above is pretty straight forward, however the tags expect the following: Name The name for the container, preferably in lowercase. Repository The name of the image to pull from dockerHub (other repositories work). e.g. domistyle/idrac6 Registry Link to the dockerHub page for this container. e.g. https://hub.docker.com/r/domistyle/idrac6/ Support A link to a support thread on the unraid forums for the container Project Link to the GitHub page (or the homepage of the project) e.g. https://github.com/DomiStyle/docker-idrac6/ Overview Basic description of the project. e.g. Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. WebUI Which container-port a webui might be on. e.g. http://[IP]:[PORT:5800] Unraid will translate this string to the IP of the server, and the host-port set for container-port 5800 Icon URL to an icon, personally I prefer them in png. It has to be loaded over https. e.g. https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/img/chevereto.png ExtraParams Parameters sent with the docker run command. e.g. --restart unless-stopped PostArgs Command to run inside the container after start. e.g. /bin/sh -c 'apk update && apk add ipmitool && telegraf' See valid example DonateText Text to show with the donate button. DonateLink URL for donations. Network Usually bridge if not specified by the image maintainer TemplateURL Url to the template. If it is a PR to our repo, set it to https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/<container-name>.xml and replace <container-name> with the actual name of the container (again, in lowercase). Warning Has to be a raw link for GitHub. DonateImg URL to donation image. 1.2.2 Add a Config \u00b6 There are two ways to achieve this, but I'm only going to focus on one of them. The syntax is like this: <Config Name= \"\" Target= \"\" Default= \"\" Mode= \"rw\" Description= \"\" Type= \"Path\" Display= \"always\" Required= \"false\" Mask= \"false\" /> This syntax spans over all the 4 config types, some attributes changes meaning depending on the Type . Add a Volume \u00b6 The volume specific values are: Target The container path for the volume. e.g. /config Mode What permissions to use for the volume. rw as ReadWrite ro as ReadOnly Slave options are also supported Type Always Path . Add a Variable \u00b6 Target The variable. e.g. IDRAC_HOST Type Always Variable . Add a Port \u00b6 Target The container port. e.g. 80 Type Always Port . Shared attributes \u00b6 Name The name that shows in the Unraid template manager. e.g. Appdata , PUID , WebUI Description A more detailed description on this Config. e.g Appdata location , PUID , WebUI Default Suggested value for the Config. e.g. /mnt/user/appdata/idrac , 99 , 8080 Display How the volume is shown to the user. always Always show the volume, can be edited and deleted in basic view. always-hide Always show the volume, can not be edited and deleted in basic view. advanced Shows when the user presses Show more settings ... , can be edited and deleted in basic view. advanced-hide Shows when the user presses Show more settings ... , can not be edited and deleted in basic view. Required If the user is able to continue without specifying the value. true or false Mask If the value should be masked behind asterisks, only really useful on variables. true or false 2 Additional tags, and neat tricks \u00b6 CA supports some extra tags that enhances the experience. They are all listed in the XML schema post . Beta Gives the application a warning in CA with the following text This application has been marked as being Beta. This does NOT neccessarily mean that there will be issues. . <Beta>true</Beta> or <Beta>false</Beta> Branch Prompts the user to choose a dockerHub tag. e.g. linuxserver/emby.xml The template manager also support setting a set of predefined values, often uses in conjunction with variables that expect bools. Defined by separating the values with | . e.g. true|false . Has to be set in the default attribute. 2.1 Categories \u00b6 It's preferred to categories your template, use the Application Categorizer plugin in CA to do this, it generates the tags we need for us.","title":"Writing a template compatible for unraid"},{"location":"docker/templating/templating/#writing-a-template-compatible-for-unraid","text":"This is an effort to collect information from Squids FAQ .","title":"Writing a template compatible for unraid"},{"location":"docker/templating/templating/#0-enabling-template-authoring-mode","text":"In order to have a smooth experience creating templates I highly recommend enabling Template Authoring Mode , it allows you to see the XML in clear-text and some other small neat tricks we might need to come back to. This process requires you to shut down the docker service for a short while, as unraid doesn't let us change the setting with the service running. When the docker service is successfully shut down, enable advanced view. We can now enable authoring mode, you can also toggle the docker service back on.","title":"0. Enabling Template Authoring Mode"},{"location":"docker/templating/templating/#1-choosing-which-way-to-go","text":"We can create a template in two ways: Convert a template generated by Community Application, the CA way Work directly with the XML","title":"1. Choosing which way to go"},{"location":"docker/templating/templating/#the-ca-way","text":"","title":"The CA way"},{"location":"docker/templating/templating/#110-enabling-search-from-dockerhub","text":"In order to have Community Applications (hereby referenced as CA) generate a template, we need to enable additional search from dockerHub. You do this by opening CA, and press the settings button on the sidebar. Enable additional search.","title":"1.1.0 Enabling search from dockerHub"},{"location":"docker/templating/templating/#111-search-from-dockerhub","text":"For this guide I will use domistyle/idrac6 as an example. Go back to CA, and type the image you want to create a template for in the search bar (If you get a match now, chances are, it is already in CA) and press Get More Results From DockerHub . CA shows results for both the image-maintainer, and image-name. Which means that we will get similar results. Press the download to disk icon, and let CA convert it. For this one CA didn't do a very good job in converting it (It reads the Dockerfile for volumes, expose, publish etc.), however we can modify it with the template editor in Unraid.","title":"1.1.1 Search from DockerHub"},{"location":"docker/templating/templating/#112-editing-the-template","text":"To see what we need to edit, we can most often refer to the readme of the container (Including a screenshot in case the readme changes) . Get to know the template editor, its very handy. Also for managing existing templates. I'm going through the rest of this guide with a mix of views (to remove clutter from images). If some of the settings you see in a screenshot isn't showing to you, enable advanced view.","title":"1.1.2 Editing the template"},{"location":"docker/templating/templating/#variables","text":"I will start with adding the variables, just because those are on the top of the documentation of this container. To add the IDRAC_HOST variable, we are going to press the Add another Path, Port, Variable or Device link. We need to change the Config Type to Variable, then we can start adding values. There is a lot going on here, but it is all going to make sense in the end. Name The name for the variable, this is to help the user identifying what this variable does. Key This is the actual variable, so we are putting IDRAC_HOST here. Value We don't fill this, this is for the user. Default Value We could fill this, but since we can only do an estimated guess on what a users idrac host is, we are going to skip it. Description Usually I don't fill this field with this long of a text, but the documentation of the container had a good one, so I'm using it. Display This decides if the \"average user\" (someone that isn't using advanced view) is going to see this variable. Required I set this to yes because I know the container wont work without it set. The fact that the documentation tells me its required also helped in the decision. Password Mask This isn't a password, so it doesn't need to have its value masked behind asterisk (*). Here are some screenshots on how I added the other required variables Here I set the Default value as root, since I know that's the default username on idrac Here I set the Default value as calvin, since I know that's the default password on idrac, I also enabled Password Mask","title":"Variables"},{"location":"docker/templating/templating/#volumes","text":"Next is adding the volumes. We press the same Add another Path, Port, Variable or Device link, but we don't need to change the config type this time. The fields we can add here is mostly the same, but with the \"Volume\" type some of them are voided. Like password mask. If it's a \"proper\" appdata location, I set required to yes Access Mode Defines how the container should have access to this volume. Almost always read/write","title":"Volumes"},{"location":"docker/templating/templating/#ports","text":"Now its time for the ports. We press the same Add another Path, Port, Variable or Device link. This time we need to change the config type to Port . The documentation for this container says we can use port 5800 to access the interface, so that's the port we are going to add. It also mentions the VNC port, but most users wont need this. Connection Type Always TCP , unless specified otherwise.","title":"Ports"},{"location":"docker/templating/templating/#metadata","text":"Now you have a basic template. This might be enough for your own usage, but in order to add it to CA we should add some spice to the template. As you can see there are lots of fields we can fill in with the template editor. I'm not going to walk you through this, but I am going to tell you how it ended up like it did. I changed the overview to match the intro from the readme of the container. I used the dropdown to set the categories as I saw fit. I set the support thread as the issue page of the project. Do not do this if you are creating a template for your own container, create a support thread on the unraid forums and use that link The project page is usually the GitHub link to the container. I have yet to change the Icon URL, because I need to create an icon. WebUI Should be filled with the container port, unraid should do the translation http://[IP]:[PORT:5800] . If this is an https enabled port, set the url to use https. For Post arguments and Extra Parameters, you should know if you need to fill this. There is more information on this in the Manual way part","title":"Metadata"},{"location":"docker/templating/templating/#113-grab-the-xml","text":"Once you have filled all the fields, and set the ports, variables and volumes as good as you can, you can press the Save button, this takes you to a page where can see the xml in plain-text. Don't worry, it also saves the xml to your OS disk. Bellow is the XML generated by the procedure above. Extracted XML <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <MyIP/> <Shell> sh </Shell> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <TemplateURL/> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <ExtraParams/> <PostArgs/> <CPUset/> <DateInstalled> 1579532295 </DateInstalled> <DonateText/> <DonateLink/> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Networking> <Mode> bridge </Mode> <Publish> <Port> <HostPort/> <ContainerPort> 5800 </ContainerPort> <Protocol> tcp </Protocol> </Port> </Publish> </Networking> <Data> <Volume> <HostDir/> <ContainerDir> /vmedia </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /app </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /screenshots </ContainerDir> <Mode> rw </Mode> </Volume> </Data> <Environment> <Variable> <Value/> <Name> IDRAC_HOST </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_USER </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PASSWORD </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PORT </Name> <Mode/> </Variable> <Variable> <Value> false </Value> <Name> IDRAC_KEYCODE_HACK </Name> <Mode/> </Variable> <Variable> <Value> 99 </Value> <Name> USER_ID </Name> <Mode/> </Variable> <Variable> <Value> 100 </Value> <Name> GROUP_ID </Name> <Mode/> </Variable> </Environment> <Labels/> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container>","title":"1.1.3 Grab the XML"},{"location":"docker/templating/templating/#114-shave-off-the-xml","text":"CA adds a lot of stuff that is not necessary for a template, but which Unraid uses to actually run and present the container. My first steps in removing unnecessary tags is to delete tags that are closed without value, like <MyIP/> . XML after <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <Shell> sh </Shell> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <DateInstalled> 1579532295 </DateInstalled> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Networking> <Mode> bridge </Mode> <Publish> <Port> <HostPort/> <ContainerPort> 5800 </ContainerPort> <Protocol> tcp </Protocol> </Port> </Publish> </Networking> <Data> <Volume> <HostDir/> <ContainerDir> /vmedia </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /app </ContainerDir> <Mode> rw </Mode> </Volume> <Volume> <HostDir/> <ContainerDir> /screenshots </ContainerDir> <Mode> rw </Mode> </Volume> </Data> <Environment> <Variable> <Value/> <Name> IDRAC_HOST </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_USER </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PASSWORD </Name> <Mode/> </Variable> <Variable> <Value/> <Name> IDRAC_PORT </Name> <Mode/> </Variable> <Variable> <Value> false </Value> <Name> IDRAC_KEYCODE_HACK </Name> <Mode/> </Variable> <Variable> <Value> 99 </Value> <Name> USER_ID </Name> <Mode/> </Variable> <Variable> <Value> 100 </Value> <Name> GROUP_ID </Name> <Mode/> </Variable> </Environment> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container> Since I prefer using just the Config tags, I also remove the tags Networking , Data and Environment together with it's content. XML after <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <Shell> sh </Shell> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <DateInstalled> 1579532295 </DateInstalled> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container> Remove DateInstalled , since it's just used internally for Unraid. Unless you know what shell the container uses, also remove Shell . What I consider a good XML, to base a PR on <?xml version=\"1.0\"?> <Container version= \"2\" > <Name> idrac6 </Name> <Repository> domistyle/idrac6 </Repository> <Registry> https://hub.docker.com/r/domistyle/idrac6/ </Registry> <Network> bridge </Network> <Privileged> false </Privileged> <Support> https://github.com/DomiStyle/docker-idrac6/issues </Support> <Project> https://github.com/DomiStyle/docker-idrac6/ </Project> <Overview> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Overview> <Category> Tools: Network:Management </Category> <WebUI> http://[IP]:[PORT:5800] </WebUI> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <Description> Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. </Description> <Config Name= \"idrac host\" Target= \"IDRAC_HOST\" Default= \"\" Mode= \"\" Description= \"Host for your iDRAC instance. Make sure your instance is reachable with https://&amp;lt;IDRAC_HOST&amp;gt;. See IDRAC_PORT for using custom ports. HTTPS is always used.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac user\" Target= \"IDRAC_USER\" Default= \"root\" Mode= \"\" Description= \"Username for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac password\" Target= \"IDRAC_PASSWORD\" Default= \"calvin\" Mode= \"\" Description= \"Password for your iDRAC instance.\" Type= \"Variable\" Display= \"always\" Required= \"true\" Mask= \"true\" /> <Config Name= \"WebUI\" Target= \"5800\" Default= \"5800\" Mode= \"tcp\" Description= \"web interface port\" Type= \"Port\" Display= \"always\" Required= \"true\" Mask= \"false\" /> <Config Name= \"idrac port\" Target= \"IDRAC_PORT&#9;\" Default= \"443\" Mode= \"\" Description= \"The optional port for the web interface.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" /> <Config Name= \"keyboard fix\" Target= \"IDRAC_KEYCODE_HACK\" Default= \"false|true\" Mode= \"\" Description= \"If you have issues with keyboard input, try setting this to true.\" Type= \"Variable\" Display= \"advanced-hide\" Required= \"false\" Mask= \"false\" > false </Config> <Config Name= \"PUID\" Target= \"USER_ID\" Default= \"\" Mode= \"\" Description= \"PUID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 99 </Config> <Config Name= \"PGID\" Target= \"GROUP_ID\" Default= \"\" Mode= \"\" Description= \"PGID\" Type= \"Variable\" Display= \"advanced\" Required= \"false\" Mask= \"false\" > 100 </Config> <Config Name= \"Virtual media\" Target= \"/vmedia\" Default= \"/mnt/user/appdata/idrac/vmedia\" Mode= \"rw\" Description= \"Can be used to allow virtual media to be mounted.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Libraries\" Target= \"/app\" Default= \"/mnt/user/appdata/idrac/app\" Mode= \"rw\" Description= \"Libraries downloaded from your iDRAC instance will be stored here. Add a volume to cache those files for a faster container startup.\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> <Config Name= \"Screenshots\" Target= \"/screenshots\" Default= \"/mnt/user/appdata/idrac/screenshots\" Mode= \"rw\" Description= \"Container Path: /screenshots\" Type= \"Path\" Display= \"advanced\" Required= \"false\" Mask= \"false\" /> </Container> More spice It's worth reading 1.1.2 Add a Config and Tips and tricks to see if any of that applies to your template.","title":"1.1.4 Shave off the XML"},{"location":"docker/templating/templating/#the-manual-way","text":"","title":"The Manual way"},{"location":"docker/templating/templating/#120-starting-from-scratch","text":"To make sure we don't miss anything, we are going to start from a baseXML. I'm using the same example-container as above. Knowing the basics of XML is preferred baseXML <?xml version=\"1.0\"?> <Container version= \"2\" > <Name></Name> <Repository></Repository> <Registry></Registry> <Network> bridge </Network> <Privileged> false </Privileged> <Support></Support> <Project></Project> <Overview></Overview> <WebUI></WebUI> <TemplateURL/> <Icon> /plugins/dynamix.docker.manager/images/question.png </Icon> <ExtraParams/> <PostArgs/> <DonateText/> <DonateLink/> </Container>","title":"1.2.0 Starting from \"scratch\""},{"location":"docker/templating/templating/#121-fill-the-base","text":"Since you are here browsing the \"hard\" way, I'm assuming you know some, if not most of the Docker terminology used going forward. Filling the baseXML above is pretty straight forward, however the tags expect the following: Name The name for the container, preferably in lowercase. Repository The name of the image to pull from dockerHub (other repositories work). e.g. domistyle/idrac6 Registry Link to the dockerHub page for this container. e.g. https://hub.docker.com/r/domistyle/idrac6/ Support A link to a support thread on the unraid forums for the container Project Link to the GitHub page (or the homepage of the project) e.g. https://github.com/DomiStyle/docker-idrac6/ Overview Basic description of the project. e.g. Allows access to the iDRAC 6 console without installing Java or messing with Java Web Start. Java is only run inside of the container and access is provided via web interface or directly with VNC. WebUI Which container-port a webui might be on. e.g. http://[IP]:[PORT:5800] Unraid will translate this string to the IP of the server, and the host-port set for container-port 5800 Icon URL to an icon, personally I prefer them in png. It has to be loaded over https. e.g. https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/img/chevereto.png ExtraParams Parameters sent with the docker run command. e.g. --restart unless-stopped PostArgs Command to run inside the container after start. e.g. /bin/sh -c 'apk update && apk add ipmitool && telegraf' See valid example DonateText Text to show with the donate button. DonateLink URL for donations. Network Usually bridge if not specified by the image maintainer TemplateURL Url to the template. If it is a PR to our repo, set it to https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/<container-name>.xml and replace <container-name> with the actual name of the container (again, in lowercase). Warning Has to be a raw link for GitHub. DonateImg URL to donation image.","title":"1.2.1 Fill the base"},{"location":"docker/templating/templating/#122-add-a-config","text":"There are two ways to achieve this, but I'm only going to focus on one of them. The syntax is like this: <Config Name= \"\" Target= \"\" Default= \"\" Mode= \"rw\" Description= \"\" Type= \"Path\" Display= \"always\" Required= \"false\" Mask= \"false\" /> This syntax spans over all the 4 config types, some attributes changes meaning depending on the Type .","title":"1.2.2 Add a Config"},{"location":"docker/templating/templating/#add-a-volume","text":"The volume specific values are: Target The container path for the volume. e.g. /config Mode What permissions to use for the volume. rw as ReadWrite ro as ReadOnly Slave options are also supported Type Always Path .","title":"Add a Volume"},{"location":"docker/templating/templating/#add-a-variable","text":"Target The variable. e.g. IDRAC_HOST Type Always Variable .","title":"Add a Variable"},{"location":"docker/templating/templating/#add-a-port","text":"Target The container port. e.g. 80 Type Always Port .","title":"Add a Port"},{"location":"docker/templating/templating/#shared-attributes","text":"Name The name that shows in the Unraid template manager. e.g. Appdata , PUID , WebUI Description A more detailed description on this Config. e.g Appdata location , PUID , WebUI Default Suggested value for the Config. e.g. /mnt/user/appdata/idrac , 99 , 8080 Display How the volume is shown to the user. always Always show the volume, can be edited and deleted in basic view. always-hide Always show the volume, can not be edited and deleted in basic view. advanced Shows when the user presses Show more settings ... , can be edited and deleted in basic view. advanced-hide Shows when the user presses Show more settings ... , can not be edited and deleted in basic view. Required If the user is able to continue without specifying the value. true or false Mask If the value should be masked behind asterisks, only really useful on variables. true or false","title":"Shared attributes"},{"location":"docker/templating/templating/#2-additional-tags-and-neat-tricks","text":"CA supports some extra tags that enhances the experience. They are all listed in the XML schema post . Beta Gives the application a warning in CA with the following text This application has been marked as being Beta. This does NOT neccessarily mean that there will be issues. . <Beta>true</Beta> or <Beta>false</Beta> Branch Prompts the user to choose a dockerHub tag. e.g. linuxserver/emby.xml The template manager also support setting a set of predefined values, often uses in conjunction with variables that expect bools. Defined by separating the values with | . e.g. true|false . Has to be set in the default attribute.","title":"2 Additional tags, and neat tricks"},{"location":"docker/templating/templating/#21-categories","text":"It's preferred to categories your template, use the Application Categorizer plugin in CA to do this, it generates the tags we need for us.","title":"2.1 Categories"},{"location":"testing/highlighting_test/","text":"Highlight test \u00b6 https://squidfunk.github.io/mkdocs-material/extensions/admonition/ HELLO Highlight Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. nginx \u00b6 # make sure that your dns has a cname set for code-server server { listen 443 ssl ; listen [::]:443 ssl ; server_name code-server.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; # enable for ldap auth, fill in ldap details in ldap.conf #include /config/nginx/ldap.conf; location / { # enable the next two lines for http auth #auth_basic \"Restricted\"; #auth_basic_user_file /config/nginx/.htpasswd; # enable the next two lines for ldap auth #auth_request /auth; #error_page 401 =200 /login; include /config/nginx/proxy.conf ; resolver 127 .0.0.11 valid=30s ; set $upstream_code_server code-server ; proxy_pass http:// $upstream_code_server:8443 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection upgrade ; } } python \u00b6 print ( \"unraid rulez\" ) bash \u00b6 #!/bin/bash echo \"Hello world!\"","title":"Highlight test"},{"location":"testing/highlighting_test/#highlight-test","text":"https://squidfunk.github.io/mkdocs-material/extensions/admonition/ HELLO Highlight Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Highlight test"},{"location":"testing/highlighting_test/#nginx","text":"# make sure that your dns has a cname set for code-server server { listen 443 ssl ; listen [::]:443 ssl ; server_name code-server.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; # enable for ldap auth, fill in ldap details in ldap.conf #include /config/nginx/ldap.conf; location / { # enable the next two lines for http auth #auth_basic \"Restricted\"; #auth_basic_user_file /config/nginx/.htpasswd; # enable the next two lines for ldap auth #auth_request /auth; #error_page 401 =200 /login; include /config/nginx/proxy.conf ; resolver 127 .0.0.11 valid=30s ; set $upstream_code_server code-server ; proxy_pass http:// $upstream_code_server:8443 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection upgrade ; } }","title":"nginx"},{"location":"testing/highlighting_test/#python","text":"print ( \"unraid rulez\" )","title":"python"},{"location":"testing/highlighting_test/#bash","text":"#!/bin/bash echo \"Hello world!\"","title":"bash"},{"location":"tips/discord_notifications/discord_notifications/","text":"Discord Notifications \u00b6 Creating the Discord webhook \u00b6 Head over to your Discord server and click on Server Settings then Webhooks and Create Webhooks Give it a name and choose the channel you want it to send notifications to. Copy the Webhook URL and click save. Adding the webhook \u00b6 As Unraid doesn't officially support Discord notifications we have to use the Slack agent. Go to the Unraid settings page and click on Notifications Make sure that system notifications are enabled and select the different types of notifications you want in the Agents list. Scroll down to the Slack agent, enable the agent, paste your webhook URL and give it a name. (The name you add here will override the name you gave it in the Discord settings) At the end of your webhook URL add /slack so the URL looks like this: https://discordapp.com/api/webhooks/40832456738934/7DcEpWr5V24OIEIELjg-KkHky86SrOgTqA/slack To test the connection you can just click the Test button. Note There are some limitations on what the different notifications titles and messages can be. I have found that notifications title Subject and notifications message Event works just fine. If you add any more it will probably not send any notifications.","title":"Adding Discord Notifications"},{"location":"tips/discord_notifications/discord_notifications/#discord-notifications","text":"","title":"Discord Notifications"},{"location":"tips/discord_notifications/discord_notifications/#creating-the-discord-webhook","text":"Head over to your Discord server and click on Server Settings then Webhooks and Create Webhooks Give it a name and choose the channel you want it to send notifications to. Copy the Webhook URL and click save.","title":"Creating the Discord webhook"},{"location":"tips/discord_notifications/discord_notifications/#adding-the-webhook","text":"As Unraid doesn't officially support Discord notifications we have to use the Slack agent. Go to the Unraid settings page and click on Notifications Make sure that system notifications are enabled and select the different types of notifications you want in the Agents list. Scroll down to the Slack agent, enable the agent, paste your webhook URL and give it a name. (The name you add here will override the name you gave it in the Discord settings) At the end of your webhook URL add /slack so the URL looks like this: https://discordapp.com/api/webhooks/40832456738934/7DcEpWr5V24OIEIELjg-KkHky86SrOgTqA/slack To test the connection you can just click the Test button. Note There are some limitations on what the different notifications titles and messages can be. I have found that notifications title Subject and notifications message Event works just fine. If you add any more it will probably not send any notifications.","title":"Adding the webhook"}]}